Comparing files EVENTS\views.py and OLD FILES\EVENTS\VIEWS.PY
***** EVENTS\views.py
from django.utils import timezone
from django.utils.crypto import get_random_string
from datetime import *
***** OLD FILES\EVENTS\VIEWS.PY
from django.utils import timezone
from datetime import *
*****

***** EVENTS\views.py

#@login_required
def detail(request, eventID):
        event = get_object_or_404(Instance, eventID=eventID)
        return render(request, 'events/detail.html', {'event': event})
***** OLD FILES\EVENTS\VIEWS.PY

def detail(request, instance_id):
        event = get_object_or_404(Instance, pk=instance_id)
        return render(request, 'events/detail.html', {'event': event})
*****

***** EVENTS\views.py
        event_length=request.POST.get('event_length', '')
        creator = request.POST['username']
        eventID = get_random_string(length=32)

***** OLD FILES\EVENTS\VIEWS.PY
        event_length=request.POST.get('event_length', '')
        creator=request.POST.get('creator', '')

*****

***** EVENTS\views.py
                        'title':title, 'desc':desc, 'start_date':start_date, 'end_date':end_date, 'time_range':time_range,
                        'event_length':event_length, 'creator':creator}

        is_scheduled=False
        if (time_range == ''):
                returnMsg['error'] = 'Time Range Cannot Be Blank'
                return render(request, 'events/index.html', returnMsg)
***** OLD FILES\EVENTS\VIEWS.PY
                        'title':title, 'desc':desc, 'start_date':start_date, 'end_date':end_date, 'time_range':time_range,
                        'event_length':event_length, 'creator':creator, 'invitees':request.POST.get('invitees', '')}

        invitees = [x for x in request.POST.get('invitees', '').split(' ') if x.replace(' ', '') != '']
        if len(invitees) != len(set(invitees)):
                returnMsg['error'] = 'Duplicate invitees included.'
                return render(request, 'events/index.html', returnMsg)
*****

***** EVENTS\views.py

        #Parse the time range
***** OLD FILES\EVENTS\VIEWS.PY

        for i in invitees:
                try:
                        u = User.objects.get(username = i)
                        if u is User.objects.get(username = creator):
                                returnMsg['error'] = 'Cannot invite yourself to your own event.'
                                return render(request, 'events/index.html', returnMsg)

                except User.DoesNotExist as e:
                        returnMsg['error'] = 'User: %s does not exist' % i
                        return render(request, 'events/index.html', returnMsg)


        is_scheduled=False
        if (time_range == ''):
                returnMsg['error'] = 'Time Range Cannot Be Blank'
                return render(request, 'events/index.html', returnMsg)

        #Parse the time range
*****

***** EVENTS\views.py
                start_time=time_range.split('-')[0], end_time=time_range.split('-')[1], event_length=event_length, creator=crea
tor, eventID=eventID)

***** OLD FILES\EVENTS\VIEWS.PY
                start_time=time_range.split('-')[0], end_time=time_range.split('-')[1], event_length=event_length, creator=crea
tor)

*****

***** EVENTS\views.py
        #n = Notification(desc=nstr, pub_date=datetime.now())

***** OLD FILES\EVENTS\VIEWS.PY
        #n = Notification(desc=nstr, pub_date=datetime.now())
        for i in invitees:
                newInvitee = Invitee(name=i, userID=User.objects.get(username=i).id, rsvpAccepted=False)
                e.invitee_set.add(newInvitee)
                emailTitle = '%s Has Invited You To %s!' % (e.creator, e.title)
                emailMsg = 'Event description: %s, with %s. Login and respond!' % (e.desc, e.invitee_set.all())
                send_mail(emailTitle, emailMsg, 'skedg.notify@gmail.com', [User.objects.get(username=i).email], fail_silently=F
alse)

*****

***** EVENTS\views.py
        #       user.notification_set.add(n)
        messages.success(request, 'Your event has been successfully created! The event url to share is skedg.tk/events/eventDet
ails/' + eventID)
        return getTimes(request, eventID)

***** OLD FILES\EVENTS\VIEWS.PY
        #       user.notification_set.add(n)
        messages.success(request, 'Your event has been successfully created!')
        return HttpResponseRedirect('/events/')

*****

***** EVENTS\views.py
def delete(request):
        eventID = request.POST['eventID']
        event = get_object_or_404(Instance, eventID=eventID)

***** OLD FILES\EVENTS\VIEWS.PY
def delete(request):
        e_id = request.POST['eventID']
        event = get_object_or_404(Instance, pk=e_id)

*****

***** EVENTS\views.py

def getTimes(request, eventID=None):
        roundToMin = 15 #minutes
***** OLD FILES\EVENTS\VIEWS.PY

def manageCreator(request):
        
        roundToMin = 15 #minutes
*****

***** EVENTS\views.py


        def roundUpByTimeDelta(dt, roundTo = roundToMin * 60):
***** OLD FILES\EVENTS\VIEWS.PY

        def roundUpByTimeDelta(dt, roundTo = roundToMin * 60):
*****

***** EVENTS\views.py

        if eventID == None:
                eventID = request.POST['eventID']

        event = get_object_or_404(Instance, eventID=eventID)

        event.is_scheduled = True
        event.save()

        many = []
        many.append(event.creator)

        for i in event.invitee_set.all():
                many.append(i.name)
        duration = int(event.event_length.split(':')[0]) * 3600 + int(event.event_length.split(':')[1]) * 60

        #TEMPORARY: fixed time zone
        startInDateTime = datetime.strptime(event.start_date + ' ' + event.start_time, '%m/%d/%Y %I:%M %p')
        if startInDateTime < datetime.now():
                startInDateTime = datetime.now()
        endInDateTime = datetime.strptime(event.start_date + ' ' + event.end_time, '%m/%d/%Y %I:%M %p')
        finalEndDateTime = datetime.strptime(event.end_date + ' ' + event.end_time, '%m/%d/%Y %I:%M %p')
        
        times = cal.findTimeForMany(many, startInDateTime, endInDateTime, finalEndDateTime, duration)
        
        print times
        # 30 minute intervals for starting time; rounding start time; etc.
        processedTimes = []
        for t in times:
                roundBy = roundUpByTimeDelta(t['startTime'])
                startEvent = t['startTime']
                # if rounding makes the event go beyond endtime, then just add the time range and call it good.
                #print (startEvent + roundBy).strftime('%Y-%m-%dT%H:%M')
                if startEvent + roundBy + timedelta(seconds=duration) > endInDateTime:
                        endEvent = startEvent + timedelta(seconds=duration)
                        priorityValue = int(t['conflicts'])*1000
                        processedTimes.append({'priority':priorityValue, 'startTime':startEvent, 'endTime':endEvent, 'conflicts
':t['conflicts']})
                        continue
                else:
                        startEvent += timedelta(minutes=roundToMin)
                        endEvent = startEvent + timedelta(seconds=duration)
                        i = 0
                        while endEvent < t['endTime']:
                                priorityValue = int(t['conflicts'])*1000 + i
                                processedTimes.append({'priority':priorityValue, 'startTime':startEvent, 'endTime':endEvent, 'c
onflicts':t['conflicts']})
                                i += 1
                                startEvent += timedelta(minutes=roundToMin)
***** OLD FILES\EVENTS\VIEWS.PY

        if 'delete' in request.POST:
                return delete(request)
        if 'getTimes' in request.POST:
                e_id = request.POST['eventID']
                event = get_object_or_404(Instance, pk=e_id)
                event.is_scheduled = True
                event.save()
                
                many = []
                many.append(event.creator)

                for i in event.invitee_set.all():
                        if i.rsvpAccepted:
                                many.append(i.name)
                duration = timedelta(int(event.event_length.split(':')[0]) * 60 + int(event.event_length.split(':')[1]))

                #TEMPORARY: fixed time zone
                startInDateTime = datetime.strptime(event.start_date + ' ' + event.start_time, '%m/%d/%Y %I:%M %p')
                endInDateTime = datetime.strptime(event.start_date + ' ' + event.end_time, '%m/%d/%Y %I:%M %p')
                finalEndDateTime = datetime.strptime(event.end_date + ' ' + event.end_time, '%m/%d/%Y %I:%M %p')
                
                times = cal.findTimeForMany(many, startInDateTime, endInDateTime, finalEndDateTime, duration)
                
                print times
                # 30 minute intervals for starting time; rounding start time; etc.
                processedTimes = []
                for t in times:
                        roundBy = roundUpByTimeDelta(t['startTime'])
                        startEvent = t['startTime']
                        # if rounding makes the event go beyond endtime, then just add the time range and call it good.
                        #print (startEvent + roundBy).strftime('%Y-%m-%dT%H:%M')
                        if startEvent + roundBy + timedelta(seconds=duration) > endInDateTime:
                                endEvent = startEvent + timedelta(seconds=duration)
                                priorityValue = -int(t['numFree'])*1000
                                processedTimes.append({'priority':priorityValue, 'startTime':startEvent, 'endTime':endEvent, 'n
umFree':t['numFree'], 'participants':t['participants']})
                                continue
                        else:
                                startEvent += timedelta(minutes=roundToMin)
*****

***** EVENTS\views.py
                                endEvent = startEvent + timedelta(seconds=duration)
        #list.sort(processedTimes)
        processedTimes = sorted(processedTimes, key=lambda k: k['priority'])

        ###### we need to clear before calling getTimes again, but I can't get it to work.
        #event.posstime_set.clear()
        for t in processedTimes:
                possTime = PossTime(startTime=t['startTime'], endTime=t['endTime'], nConflicts=t['conflicts'])
                event.posstime_set.add(possTime)
        #possTime = PossTime()
        #event.posstime_set.add(possTime)

        print "almost there!"
        return detail(request, eventID)
        
#creator can boot someone, delete/skedge/getTimes on event.
def manageCreator(request):
        if 'boot' in request.POST:
                eventID = request.POST['eventID']
                event = get_object_or_404(Instance, eventID=eventID)
                i_name = request.POST['invitee_name']
                invitee = get_object_or_404(Invitee, name=i_name)
                invitee.delete();
                getTimes(request)

        if 'delete' in request.POST:
                return delete(request)
        if 'getTimes' in request.POST:
                return getTimes(request)
        if 'skedg' in request.POST:                     
                eventID = request.POST['eventID']
                event = get_object_or_404(Instance, eventID=eventID)
                invitees = event.invitee_set.all()
***** OLD FILES\EVENTS\VIEWS.PY
                                endEvent = startEvent + timedelta(seconds=duration)
                                i = 0
                                while endEvent < t['endTime']:
                                        priorityValue = -int(t['conflicts'])*1000 + i
                                        processedTimes.append({'priority':priorityValue, 'startTime':startEvent, 'endTime':endE
vent, 'numFree':t['numFree'], 'participants':t['participants']})
                                        i += 1
                                        startEvent += timedelta(minutes=roundToMin)
                                        endEvent = startEvent + timedelta(seconds=duration)
                #list.sort(processedTimes)
                processedTimes = sorted(processedTimes, key=lambda k: k['priority'])

                for t in processedTimes:
                        possTime = PossTime(startTime=t['startTime'], endTime=t['endTime'], nFree=t['numFree'], peopleList=t['p
articipants'].__str__())
                        event.posstime_set.add(possTime)
                #possTime = PossTime()
                #event.posstime_set.add(possTime)
                return HttpResponseRedirect('/events/')
        if 'vetoPoss' in request.POST:
                return vetoPoss(request)
        if 'skedg' in request.POST:                     
                e_id = request.POST['eventID']
                event = get_object_or_404(Instance, pk=e_id)
                invitees = event.invitee_set.all()
*****

***** EVENTS\views.py
                #add notification
                ntstr = event.creator + " has skedged " + event.title + " and it has been added to your calendar! GG, everyone.
"
                n = Notification(desc=ntstr, pub_date=datetime.now())
***** OLD FILES\EVENTS\VIEWS.PY
                #add notification
                ntstr = event.creator + " has skedguled " + event.title + " and it has been added to your calendar! GG, everyon
e."
                n = Notification(desc=ntstr, pub_date=datetime.now())
*****

***** EVENTS\views.py
                for i in invitees:
                        peopleList.append(i.name)
                        u = get_object_or_404(User, username=i.name)
                        u.notification_set.add(n)
                peopleList.append(event.creator)
***** OLD FILES\EVENTS\VIEWS.PY
                for i in invitees:
                        if i.rsvpAccepted:
                                peopleList.append(i.name)
                                u = get_object_or_404(User, username=i.name)
                                u.notification_set.add(n)
                peopleList.append(event.creator)
*****

***** EVENTS\views.py

#user can join, remove self, and vote
def manageInvitee(request):
        eventID = request.POST.get('eventID', -1)
        event = get_object_or_404(Instance, eventID=eventID)
        username = request.POST['username']

        print request.POST

        if 'join' in request.POST:
                if (len(event.invitee_set.filter(name = username)) > 0):
                        messages.success(request, "You already part of the party, yo.")
                        return detail(request, eventID)
                else:
                        invitee = Invitee(name=username)
                        event.invitee_set.add(invitee)
                        return getTimes(request)
        if 'decline' in request.POST:
                if (len(event.invitee_set.filter(name = username)) > 0):
                        # commenting out notification for now
                        #ntstr = username + " has been removed from " + event.title
                        #n = Notification(desc=ntstr, pub_date=datetime.now())
                        #creator = get_object_or_404(User, username=event.creator)
                        #creator.notification_set.add(n)

                        inviteeSet = event.invitee_set.all()
                        invitee = inviteeSet.get(name=username)
                        invitee.delete()
                        return getTimes(request)
                #event.invitee_set = event.invitee_set.all().exclude(name=username)
                else:
                        messages.success(request, "You were not invited, foo.")
                        return detail(request, eventID)
                        #return detail(request, e_id)
        if 'vote' in request.POST:
                invitee.hasVoted = True
***** OLD FILES\EVENTS\VIEWS.PY

def manageInvitee(request):
        e_id = request.POST.get('eventID', -1)
        event = get_object_or_404(Instance, pk=e_id)
        username = request.POST['username']
        inviteeSet = event.invitee_set.all()
        invitee = inviteeSet.get(name=username)

        if 'vetoPoss' in request.POST:
                invitee.hasVoted = True
*****

***** EVENTS\views.py
                invitee.save()
                return vetoPoss(request)        

***** OLD FILES\EVENTS\VIEWS.PY
                invitee.save()
                return vetoPoss(request)
        
        if 'accept' in request.POST:
                invitee.rsvpAccepted = True
                invitee.save()
                return HttpResponseRedirect('/events/')
        else:
                ntstr = username + " has been removed from " + event.title
                n = Notification(desc=ntstr, pub_date=datetime.now())
                creator = get_object_or_404(User, username=event.creator)
                creator.notification_set.add(n)
                invitee.delete()
                #event.invitee_set = event.invitee_set.all().exclude(name=username)
                return HttpResponseRedirect('/events/')

*****

***** EVENTS\views.py

def results(request, eventID):
        event = get_object_or_404(Question, eventID=eventID)
        return render(request, 'events/results.html', {'event': event})
***** OLD FILES\EVENTS\VIEWS.PY

def results(request, instance_id):
        event = get_object_or_404(Question, pk=instance_id)
        return render(request, 'events/results.html', {'event': event})
*****

***** EVENTS\views.py
                        user = user_form.save()
                        #user.is_active = False
                        user.set_password(user.password)
***** OLD FILES\EVENTS\VIEWS.PY
                        user = user_form.save()
                        user.is_active = False
                        user.set_password(user.password)
*****

***** EVENTS\views.py
        return render_to_response(
                        'events/login.html',
                        {'registered': registered},
                        context)
***** OLD FILES\EVENTS\VIEWS.PY
        return render_to_response(
                        'events/register.html',
                        {'user_form': user_form, 'profile_form': profile_form, 'registered': registered},
                        context)
*****

***** EVENTS\views.py
def vetoPoss(request):
        eventID = request.POST['eventID']
        event = get_object_or_404(Instance, eventID=eventID)
        possTimes = event.posstime_set.all()
***** OLD FILES\EVENTS\VIEWS.PY
def vetoPoss(request):
        e_id = request.POST['eventID']
        event = get_object_or_404(Instance, pk=e_id)
        possTimes = event.posstime_set.all()
*****

